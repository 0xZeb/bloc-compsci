function Queue(){

  this.data = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

}

//0th element will be the tail of the line --unshift to add
//nth element will be the head of the line --pop to remove

Queue.prototype.add = function (newElement) {
  this.data.unshift(newElement);
}

Queue.prototype.remove = function () {
  this.data.pop();
}

Queue.prototype.back = function () {
  return this.data[0];
}

Queue.prototype.front = function () {
  return this.data[this.data.length - 1];
}

Queue.prototype.size = function () {
  return this.data.length;
}

Queue.prototype.isInLine = function (searchKey) {

	if( this.data.indexOf(searchKey) >= 0 ){
      return this.data.indexOf(searchKey)
  }
  else
  		return searchKey + " isn't here...";
}

Queue.prototype.cuts = function(cutter, friend){
  //pseudocode prototype

  const friendIndex = this.isInLine(cutter);

  this.data.splice( friendIndex + 1, 0, friend );
  console.log("My friend " + friend + " is here!")

}

Queue.prototype.showLine = function(){
  console.log("this is everyone in line: ");
	this.data.forEach( element => console.log(element));
}


Queue.prototype.leaveLine = function(personLeaving){
    const index = this.data.indexOf(personLeaving);

    if (index !== -1) {
        this.data.splice(index, 1);
    }
}


const q = new Queue();
q.add("Mary");
console.log("Size of array " + q.size())
console.log("Where is Mary? " + q.isInLine("Mary"));
console.log("Where is Mike? " + q.isInLine("Mike"));
q.cuts("Ava", "Melissa");
console.log("Size of array after cuts " + q.size())
q.showLine()
console.log(q.isInLine("ZEB"))
q.leaveLine("Melissa")
q.showLine()
