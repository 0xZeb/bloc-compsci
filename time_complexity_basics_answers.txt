### Exercises

> 1.What is time complexity and what is its relation to algorithms?

Time complexity is calculated on how quickly the program runs given a specific
size of input.

> 2.What is runtime?

Runtime is either physical duration of an algorithm but can be used interchangeably
with time complexity.

> 3.How is the runtime of an algorithm calculated?

To calculate runtime, you must add up instructions that will execute as a function of the size of its input.
The largest term will take the longest, so isolate that and drop any constants.

> 4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in
order of most efficient to least efficient. Now Google another algorithmic growth rate not
covered and place it in the correct spot in your list.

Six types of algorithmic growth rates, ordered by efficiency are, O(1) [constant growth], O(log n) [logarithmic growth],
O(n) [linear growth], O(n log n) [log-linear growth], O(n^2) [quadratic growth]
 and O(2^n) [Exponential growth]. To add one more would be O(n!) [factorial growth] and
 that would come in dead last for efficiency.


> 5.Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

The line at the movie theatre is an example of linear growth rate.

> 6.Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

O(n) - length of the array

> 7.Determine the time complexity of the following snippet of code.

 O(n^2) - nested for-loop

> 8.Determine the time complexity of the following snippet of code. It is
 commonly known as Fibonacci Sequence.

 O(2^n) - recursive


> 9.Out of the code snippets you just saw, which is the most time efficient?

Linear time of the linear search function is most efficient even in larger inputs.
