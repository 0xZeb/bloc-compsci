Exercises

1. What are some pros and cons of using linked lists instead of arrays?

Linked lists take performance hits because their nodes are not next to each other which is important because to access a node in the middle of a linked list,  you have to search through
each of the previous nodes.

The pros are that since the memory is independent, linked lists can grow easily in size without needing large adjacent memory blocks. Since you dont need to reserve large chunks of memory, you dont waste memory.

2. Come up with a real world example of a linked list.

A physical example of a linked list is a train. Each car is connected to the next and there is no way to skip ahead without going through the next car. As far as a practical example, browser history seems like a linked list of web pages. Each time you click forward or backward, you only pull up the next page. You cant skip, as you have to pass through one page at a time.

Programming Questions

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.


LinkedList.prototype.push = function(element) {

 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE

   SET current.next to node

}



2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d





3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a
